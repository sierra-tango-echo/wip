<%
require 'ipaddr'
def to_cidr(network,netmask)
  "#{network.to_s}/#{IPAddr.new(netmask.to_s).to_i.to_s(2).count('1')}"
end
name="#{config.cluster}"

-%>
---
Description: 'Flight Domain Template'
Mappings:
Resources:
  <%=name%>Network:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: <%=to_cidr(config.domainnetwork,config.domainnetmask)%>
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        -
          Key: 'Name'
          Value: '<%=name%>'
        -
          Key: 'alcescluster'
          Value: <%=config.cluster%>

  <%=name%>InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: <%=name%>Network
    Properties:
      Tags:
        -
          Key: 'Name'
          Value: '<%=name%>'
        -
          Key: 'alcescluster'
          Value: <%=config.cluster%>
  
  <%=name%>InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref <%=name%>InternetGateway
      VpcId: !Ref <%=name%>Network

  <%=name%>RouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: <%=name%>InternetGatewayAttachment
    Properties:
      VpcId: !Ref <%=name%>Network
      Tags:
        -
          Key: 'Name'
          Value: '<%=name%>'
        -
          Key: 'alcescluster'
          Value: <%=config.cluster%>
  
<% config.networks.each do |networkname,network|-%>
<% if network.defined && !(network.dhcp) -%>

  <%=name%><%=networkname%>Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: <%=to_cidr(network.network,network.netmask)%>
      VpcId: !Ref <%=name%>Network
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        -
          Key: 'Name'
          Value: '<%=name%>'
        -
          Key: 'alcescluster'
          Value: <%=config.cluster%>
<% if network.primary -%>

  <%=networkname%>SubnetRouteTableAssocation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref <%=name%><%=networkname%>Subnet
      RouteTableId: !Ref <%=name%>RouteTable
<% end -%>
<% end -%>
<% end -%>

  <%=name%>RouteInternetGateway:
    Type: AWS::EC2::Route
    DependsOn: <%=name%>InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref <%=name%>RouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref <%=name%>InternetGateway
  
  <%=name%>SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: <%=name%>
      GroupDescription: 'Primary SG for <%=name%>'
      VpcId: !Ref <%=name%>Network
      SecurityGroupIngress:
        -
          IpProtocol: '-1'
          FromPort: 0
          ToPort: 65535
          CidrIp: '<%=to_cidr(config.domainnetwork,config.domainnetmask)%>'
          Description: 'Allow all traffic for cluster VPC'
        -
          IpProtocol: 'tcp'
          FromPort: 22
          ToPort: 22
          CidrIp: '213.83.69.6/32'
          Description: 'Allow inbound SSH access'
        -
          IpProtocol: 'icmp'
          FromPort: '8'
          ToPort: '-1'
          CidrIp: '0.0.0.0/0'
          Description: 'Allow ping'
      SecurityGroupEgress:
        -
          IpProtocol: '-1'
          FromPort: 0
          ToPort: 65535
          CidrIp: '0.0.0.0/0'
          Description: 'Allow outbound internet access'
      Tags:
        -
          Key: 'Name'
          Value: '<%=name%>'
        -
          Key: 'alcescluster'
          Value: <%=config.cluster%>

Outputs:
  domaincloudID:
    Description: domaincloudID
    Value: !Ref <%=config.cluster%>Network
<% config.networks.each do |networkname,network|-%>
<% if network.defined -%>
  <%=networkname%>cloudID:
    Description: <%=networkname%>cloudID
    Value: !Ref <%=config.cluster%><%=networkname%>Subnet
<% end -%>
<% end -%>
